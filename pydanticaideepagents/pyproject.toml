[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pydanticaideepagents"
version = "0.1.0"
description = "Pydantic AI implementation of Deep Agents with sophisticated prompting and multi-agent coordination"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "DeepAgents Team" },
]
keywords = [
    "ai",
    "agents", 
    "pydantic-ai",
    "llm",
    "anthropic",
    "claude",
    "multi-agent",
    "planning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pydantic-ai>=0.0.13",
    "pydantic>=2.0.0",
    "anthropic>=0.34.0",
]

[project.optional-dependencies]
examples = [
    "tavily-python>=0.5.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.8.0",
]
all = [
    "pydanticaideepagents[examples,dev]"
]

[project.urls]
Homepage = "https://github.com/deepagents/pydanticaideepagents"
Repository = "https://github.com/deepagents/pydanticaideepagents"
Documentation = "https://github.com/deepagents/pydanticaideepagents#readme"
"Bug Reports" = "https://github.com/deepagents/pydanticaideepagents/issues"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/examples",
    "/README.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pydanticaideepagents"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "tavily.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short"